name: 'Contrast AI SmartFix'
description: 'Automatically generate fixes for vulnerabilities detected by Contrast Security'
author: 'Contrast Security'

branding:
  icon: 'shield'
  color: 'green'

inputs:
  build_command:
    description: 'Command to build the application'
    required: false
  max_qa_attempts:
    description: 'Maximum number of QA intervention attempts'
    required: false
    default: '6'
  formatting_command:
    description: 'Command to format code (optional)'
    required: false
  max_open_prs:
    description: 'Maximum number of open PRs'
    required: false
    default: '5'
  max_events_per_agent:
    description: 'Maximum number of events per agent run before terminating (default: 120)'
    required: false
    default: '120'
  github_token:
    description: 'GitHub token for PR operations'
    required: true
  base_branch:
    description: 'Base branch for PRs'
    required: false
    default: 'main'
  contrast_host:
    description: 'Contrast Security API host'
    required: true
  contrast_org_id:
    description: 'Contrast Organization ID'
    required: true
  contrast_app_id:
    description: 'Contrast Application ID'
    required: true
  contrast_authorization_key:
    description: 'Contrast Authorization Key'
    required: true
  contrast_api_key:
    description: 'Contrast API Key'
    required: true
  gemini_api_key:
    description: 'Gemini API key for Google AI Studio'
    required: false
  anthropic_api_key:
    description: 'Anthropic API key'
    required: false
  azure_api_key:
    description: 'Azure API Key for Azure OpenAI'
    required: false
  azure_api_base:
    description: 'Azure API Base URL'
    required: false
  azure_api_version:
    description: 'Azure API Version'
    required: false
  aws_access_key_id:
    description: 'AWS Access Key ID for Bedrock'
    required: false
  aws_secret_access_key:
    description: 'AWS Secret Access Key for Bedrock'
    required: false
  aws_session_token:
    description: 'AWS Session Token'
    required: false
    default: ''
  aws_region_name:
    description: 'AWS Region Name'
    required: false
    default: 'us-east-1'
  aws_profile_name:
    description: 'AWS Profile Name'
    required: false
    default: ''
  aws_role_name:
    description: 'AWS Role Name'
    required: false
    default: ''
  aws_session_name:
    description: 'AWS Session Name'
    required: false
    default: ''
  aws_web_identity_token:
    description: 'AWS Web Identity Token'
    required: false
    default: ''
  aws_bedrock_runtime_endpoint:
    description: 'AWS Bedrock Runtime Endpoint'
    required: false
    default: ''
  agent_model:
    description: 'LLM model path to use for the agent'
    required: false
    default: 'bedrock/us.anthropic.claude-3-7-sonnet-20250219-v1:0'
  skip_writing_security_test:
    description: 'Whether to attempt writing security tests'
    required: false
    default: 'false'
  skip_qa_review:
    description: 'Whether to skip QA review'
    required: false
    default: 'false'
  debug_mode:
    description: 'Enable debug mode for verbose logging'
    required: false
    default: 'false'
  vulnerability_severities:
    description: 'Array of vulnerability severity levels to process (allowed: CRITICAL, HIGH, MEDIUM, LOW, NOTE)'
    required: false
    default: '["CRITICAL", "HIGH"]'
  run_task:
    description: 'Specifies the task for the action to perform. "generate_fix" (default) runs main.py, "merge" runs merge_handler.py.'
    required: false
    default: 'generate_fix'
  enable_full_telemetry:
    description: 'Enable full telemetry, including potentially sensitive data. Defaults to true.'
    required: false
    default: 'true'

runs:
  using: 'composite'
  steps:
    # Main header to clearly mark the beginning of the action
    - name: Begin SmartFix Process
      shell: bash || pwsh || cmd
      run: |
        echo ""
        echo "================================================================"
        echo "🛡️  CONTRAST AI SMARTFIX PROCESS STARTED"
        echo "================================================================"
        echo ""

    # Verify Git is available and ensure Git Bash is in PATH on Windows
    - name: Verify Git availability
      shell: bash || pwsh
      run: |
        echo "Verifying Git availability..."
        if [ "$RUNNER_OS" = "Linux" ] || [ "$RUNNER_OS" = "macOS" ]; then
          # Just verify Git is available
          which git || { echo "ERROR: Git not found. Git is required for this action."; exit 1; }
        elif [ "$RUNNER_OS" = "Windows" ]; then
          # Check if Git is available
          where git || { echo "ERROR: Git not found. Git is required for this action."; exit 1; }
          
          # On Windows, ensure Git Bash is in PATH
          powershell -Command "
            # Check if Git Bash exists in standard location
            $gitBashPath = 'C:\\Program Files\\Git\\bin'
            if (Test-Path $gitBashPath) {
              # Check if already in PATH
              if ($env:PATH -notlike \"*$gitBashPath*\") {
                echo 'Adding Git Bash to PATH...'
                $env:PATH += \";$gitBashPath\"
                [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Process')
              } else {
                echo 'Git Bash is already in PATH'
              }
            } else {
              echo 'WARNING: Git Bash not found at standard location (C:\Program Files\Git\bin)'
              # Try to locate bash.exe in other common locations
              $bashPath = (Get-Command bash.exe -ErrorAction SilentlyContinue).Source
              if ($bashPath) {
                echo \"Git Bash found at: $bashPath\"
                # Add this path to the PATH as well
                $bashDir = Split-Path -Parent $bashPath
                if ($env:PATH -notlike \"*$bashDir*\") {
                  echo \"Adding found Git Bash to PATH...\"
                  $env:PATH += \";$bashDir\"
                  [Environment]::SetEnvironmentVariable('PATH', $env:PATH, 'Process')
                }
              } else {
                echo \"ERROR: Could not locate Git Bash executable. Git Bash is required on Windows.\"
                exit 1
              }
            }
          "
        fi
        echo "Git version: $(git --version)"

    # Checkout with reduced verbosity
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Setup tools section with cleaner output
    - name: Environment setup header
      shell: bash
      run: |
        echo ""
        echo "================================================================"
        echo "🔧 ENVIRONMENT SETUP"
        echo "================================================================"
        echo ""

    # Reduce Python setup verbosity
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    # Install uv tool for dependency management
    - name: Install uv
      shell: bash
      run: |
        echo ""
        echo "📦 Installing uv package manager..."
        if [ "$RUNNER_OS" = "Windows" ]; then
          pip install uv==0.7.12 > uv-install.log || (cat uv-install.log && exit 1)
        else
          pip install uv==0.7.12 > /tmp/uv-install.log || (cat /tmp/uv-install.log && exit 1)
        fi
        echo "✅ uv installed successfully"

    # Install dependencies using uv
    - name: Install dependencies with uv
      shell: bash
      run: |
        echo ""
        echo "📦 Installing Python packages using uv..."
        echo "📎 Using lockfile for deterministic installation"
        if [ "$RUNNER_OS" = "Windows" ]; then
          uv pip sync --system ${{ github.action_path }}/src/requirements.lock > uv-output.log || (cat uv-output.log && exit 1)
        else
          uv pip sync --system ${{ github.action_path }}/src/requirements.lock > /tmp/uv-output.log || (cat /tmp/uv-output.log && exit 1)
        fi
        echo "✅ Python dependencies installed successfully"

    # Reduce Node.js setup verbosity  
    - name: Set up Node.js
      shell: bash
      run: |
        echo ""
        echo "➡️ Setting up Node.js 22..."

    - uses: actions/setup-node@v4
      with:
        node-version: '22'
        check-latest: false

    # Install GitHub CLI
    - name: Install GitHub CLI
      shell: bash
      run: |
        echo ""
        echo "📦 Installing GitHub CLI..."
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update -qq > /dev/null
          sudo apt-get install -y -qq gh > /dev/null
        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew install gh || echo "GitHub CLI already installed"
        elif [ "$RUNNER_OS" = "Windows" ]; then
          # For Windows, use Git Bash to install GitHub CLI
          if command -v gh &> /dev/null; then
            echo "GitHub CLI is already installed"
          else
            echo "Installing GitHub CLI via direct download..."
            
            # Download and install GitHub CLI
            curl -sSL https://github.com/cli/cli/releases/download/v2.45.0/gh_2.45.0_windows_amd64.msi -o gh.msi
            start /wait msiexec.exe /i gh.msi /quiet
            rm gh.msi
          fi
        fi
        echo "✅ GitHub CLI installation attempt complete"
        # Verify GitHub CLI installation - required for this action
        gh --version || { echo "ERROR: GitHub CLI verification failed. GitHub CLI is required for this action."; exit 1; }

    - name: Setup complete
      shell: bash
      run: |
        echo ""
        echo "✅ Environment setup complete"
        echo ""

    # Run the main SmartFix analysis script with clear start/end markers - cross-platform compatible
    - name: Run Contrast AI SmartFix
      shell: bash
      run: |
        echo ""
        echo "================================================================"
        # Cross-platform compatible script execution
        if [ "${{ inputs.run_task }}" = "merge" ]; then
          echo "🚀 STARTING CONTRAST AI SMARTFIX (Task: merge)"
          echo "================================================================"
          python "${{ github.action_path }}/src/merge_handler.py"
        elif [ "${{ inputs.run_task }}" = "closed" ]; then
          echo "🚀 STARTING CONTRAST AI SMARTFIX (Task: closed)"
          echo "================================================================"
          python "${{ github.action_path }}/src/closed_handler.py"
        else
          echo "🚀 STARTING CONTRAST AI SMARTFIX (Task: generate_fix)"
          echo "================================================================"
          python "${{ github.action_path }}/src/main.py"
        fi
        echo ""
        
        echo ""
        echo "================================================================"
        echo "✨ CONTRAST AI SMARTFIX PROCESS COMPLETE"
        echo "================================================================"
      env:
        # --- Build Command ---
        BUILD_COMMAND: ${{ inputs.build_command }}
        # --- Max QA Intervention Attempts ---
        MAX_QA_ATTEMPTS: ${{ inputs.max_qa_attempts }}
        # --- Formatting Command ---
        FORMATTING_COMMAND: ${{ inputs.formatting_command }}
        # --- Max Open PRs ---
        MAX_OPEN_PRS: ${{ inputs.max_open_prs }}
        # --- GitHub Token ---
        GITHUB_TOKEN: ${{ inputs.github_token }}
        # --- Base Branch ---
        BASE_BRANCH: ${{ inputs.base_branch }}
        # --- Contrast API Credentials ---
        CONTRAST_HOST: ${{ inputs.contrast_host }}
        CONTRAST_ORG_ID: ${{ inputs.contrast_org_id }}
        CONTRAST_APP_ID: ${{ inputs.contrast_app_id }}
        CONTRAST_AUTHORIZATION_KEY: ${{ inputs.contrast_authorization_key }}
        CONTRAST_API_KEY: ${{ inputs.contrast_api_key }}
        # --- Google Gemini Credentials (LiteLLM) ---
        GEMINI_API_KEY: ${{ inputs.gemini_api_key }}
        # --- Anthropic Credentials (LiteLLM) ---
        ANTHROPIC_API_KEY: ${{ inputs.anthropic_api_key }}
        # --- Azure Credentials for Azure OpenAI (LiteLLM) ---
        AZURE_API_KEY: ${{ inputs.azure_api_key }}
        AZURE_API_BASE: ${{ inputs.azure_api_base }}
        AZURE_API_VERSION: ${{ inputs.azure_api_version }}
        # --- AWS Credentials for LiteLLM/Bedrock ---
        AWS_ACCESS_KEY_ID: ${{ inputs.aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.aws_secret_access_key }}
        AWS_REGION_NAME: ${{ inputs.aws_region_name }}
        AWS_SESSION_TOKEN: ${{ inputs.aws_session_token }}
        AWS_PROFILE_NAME: ${{ inputs.aws_profile_name }}
        AWS_ROLE_NAME: ${{ inputs.aws_role_name }}
        AWS_SESSION_NAME: ${{ inputs.aws_session_name }}
        AWS_WEB_IDENTITY_TOKEN: ${{ inputs.aws_web_identity_token }}
        AWS_BEDROCK_RUNTIME_ENDPOINT: ${{ inputs.aws_bedrock_runtime_endpoint }}
        # --- Agent Configuration ---
        AGENT_MODEL: ${{ inputs.agent_model }}
        MAX_EVENTS_PER_AGENT: ${{ inputs.max_events_per_agent }}
        # --- Test Writing Configuration ---
        SKIP_WRITING_SECURITY_TEST: ${{ inputs.skip_writing_security_test }}
        # --- QA Configuration ---
        SKIP_QA_REVIEW: ${{ inputs.skip_qa_review }}
        # --- Debug Mode ---
        DEBUG_MODE: ${{ inputs.debug_mode }}
        # --- Vulnerability Configuration ---
        VULNERABILITY_SEVERITIES: ${{ inputs.vulnerability_severities }}
        # --- Run Task ---
        RUN_TASK: ${{ inputs.run_task }}
        # --- Telemetry Configuration ---
        ENABLE_FULL_TELEMETRY: ${{ inputs.enable_full_telemetry }}